# Porta da aplicacao
server.port=8080

# Banco de dados
# spring.datasource.url = jdbc:postgresql://localhost:5432/ms_users
# spring.datasource.username=user_ms_users
# spring.datasource.password=123456
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Conexao do RabbitMQ com o servico disponibilizado em https://www.cloudamqp.com/
# A retencao/distribuicao das mensagens entre microservices nos nao implementamos, 
# ela eh feita na nuvem, pelo RabbitMQ. Assim como o github eh um servico para o 
# git na nuvem, o cloudamqp eh um servico para o RabbitMQ na nuvem.
# Os dados para conexao estao nos details do servico ms_Estudos criado no cloudamqp.com
# O email da conta lah eh rnlsystems00@gmail.com

# Url do servico RabbitMQ
# spring.rabbitmq.addresses=amqps://ybctwhvw:UAWEQSmaZaDec1Ch0GmG_R3LVgsGkCZC@jackal.rmq.cloudamqp.com/ybctwhvw
# Nome da fila de mensagens. Esta fila sera criada no RabbitMQ, e este microservice (MS_EMAIL)
# vai ser um consumidor desta fila, e sempre que chegar uma mensagem nesta fila, esta 
# aplicacao (MS_EMAIL) vai receber estas mensagens e processar.
# spring.rabbitmq.queue.email=ms.email

# Conexao com o RabbitMQ
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=myuser
spring.rabbitmq.password=mypassword

spring.rabbitmq.queue=ms_email_queue

